- name: Place kubeconfig.sh
  template:
    src: files/kubeconfig.sh
    dest: "$HOME/.bash.d/kubeconfig.sh"
    mode: 0755

- name: Install kubectl
  shell: |
    curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/$(uname -s | tr '[A-Z]' '[a-z]')/amd64/kubectl"
    chmod +x ./kubectl
    mv ./kubectl /usr/local/bin
  args:
    executable: /bin/bash

- name: Enable kubectl
  shell: exec $SHELL -l

- name: Install krew
  shell: |
    set -x; cd "$(mktemp -d)"
    curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/krew.{tar.gz,yaml}"
    tar zxvf krew.tar.gz
    KREW=./krew-"$(uname | tr '[:upper:]' '[:lower:]')_amd64"
    "$KREW" install --manifest=krew.yaml --archive=krew.tar.gz
    "$KREW" update
  args:
    executable: /bin/bash

- name: Install kubectl plugins
  shell: |
    kubectl krew install ctx
    kubectl krew install ns
    kubectl krew install iexec
    kubectl krew install status
    kubectl krew install tree
    kubectl krew install view-secret
    kubectl krew install whoami
  args:
    executable: /bin/bash

- name: Place kubectl-debug config
  template:
    src: files/debug-config
    dest: "$HOME/.kube/debug-config"
    mode: 0755

- name: Install helm
  shell: |
    SYSNAME="$(uname -s | tr '[A-Z]' '[a-z]')-amd64"
    RELEASE="$(curl -s https://api.github.com/repos/helm/helm/releases/latest | jq -r --arg SYSNAME "$SYSNAME" '.assets[] | select((.name | contains($SYSNAME)) and (.name | contains("sha256") | not)) | .name' | sed s/.asc//)"
    wget https://get.helm.sh/"$RELEASE"
    tar -zxvf "$RELEASE"
    chmod +x "$SYSNAME/helm"
    mv "$SYSNAME/helm" /usr/local/bin
    rm -r "$SYSNAME"
  args:
    executable: /bin/bash

- name: Install Helm Plugin
  shell: |
    helm plugin install https://github.com/rimusz/helm-tiller
    helm plugin install https://github.com/databus23/helm-diff --version master
    helm plugin install https://github.com/futuresimple/helm-secrets
  args:
    executable: /bin/bash

- name: Install Helmfile
  shell: |
    SYSNAME="$(uname -s | tr '[A-Z]' '[a-z]')_amd64"
    curl -s https://api.github.com/repos/roboll/helmfile/releases/latest | jq -r --arg SYSNAME "$SYSNAME" '.assets[] | select(.name | contains($SYSNAME)) | .browser_download_url' | wget -i -
    chmod +x "helmfile_$SYSNAME"
    mv "helmfile_$SYSNAME" /usr/local/bin/helmfile
  args:
    executable: /bin/bash

- name: Install stern
  shell: |
    SYSNAME="$(uname -s | tr '[A-Z]' '[a-z]')_amd64"
    curl -s https://api.github.com/repos/wercker/stern/releases/latest | jq -r --arg SYSNAME "$SYSNAME" '.assets[] | select(.name | contains($SYSNAME)) | .browser_download_url' | wget -i -
    mv "stern_$SYSNAME" /usr/local/bin
    chmod +x /usr/local/bin/stern
  args:
    executable: /bin/bash

- name: Install lsec2
  shell: |
    SYSNAME="$(uname -s | tr '[A-Z]' '[a-z]')_amd64"
    RELEASE="$(curl -s https://api.github.com/repos/goldeneggg/lsec2/releases/latest | jq -r --arg SYSNAME "$SYSNAME" '.assets[] | select(.name | contains($SYSNAME)) | .name')"
    curl -s https://api.github.com/repos/goldeneggg/lsec2/releases/latest | jq -r --arg SYSNAME "$SYSNAME" '.assets[] | select(.name | contains($SYSNAME)) | .browser_download_url' | wget -i -
    tar zxvf "$RELEASE"
    chmod +x lsec2
    mv lsec2 /usr/local/bin

- name: Install awscli
  shell: |
    curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
    installer -pkg AWSCLIV2.pkg -target /
  args:
    executable: /bin/bash
  when: "ansible_os_family == 'Darwin'"

- name: Install awscli
  become: yes
  shell: |
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip awscliv2.zip
    ./aws/install
  args:
    executable: /bin/bash
  when: "ansible_os_family == 'Debian'"

- name: Install saml2aws
  shell: |
    brew tap versent/homebrew-taps
    brew install saml2aws
  args:
    executable: /bin/bash
  when: "ansible_os_family == 'Darwin'"

- name: Install eksctl
  shell: |
    curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz
    mv eksctl /usr/local/bin
  args:
    executable: /bin/bash

- name: Install sops
  shell: |
    SYSNAME="$(uname -s | tr '[A-Z]' '[a-z]')"
    RELEASE="$(curl -s https://api.github.com/repos/mozilla/sops/releases/latest | jq -r --arg SYSNAME "$SYSNAME" '.assets[] | select(.name | contains($SYSNAME)) | .name')"
    curl -s https://api.github.com/repos/mozilla/sops/releases/latest | jq -r --arg SYSNAME "$SYSNAME" '.assets[] | select(.name | contains($SYSNAME)) | .browser_download_url' | wget -i -
    chmod +x "$RELEASE"
    mv "$RELEASE" /usr/local/bin/sops

- name: Install sopsed
  shell: |
    curl -s https://api.github.com/repos/mumoshu/sopsed/releases/latest | jq -r ".assets[] | .browser_download_url" | wget -i -
    chmod +x sopsed
    mv sopsed /usr/local/bin
  args:
    executable: /bin/bash

- name: Install variant
  shell: |
    SYSNAME="$(uname -s | tr '[A-Z]' '[a-z]')_amd64"
    RELEASE="$(curl -s https://api.github.com/repos/mumoshu/variant/releases/latest | jq -r --arg SYSNAME "$SYSNAME" '.assets[] | select(.name | contains($SYSNAME)) | .name')"
    curl -s https://api.github.com/repos/mumoshu/variant/releases/latest | jq -r --arg SYSNAME "$SYSNAME" '.assets[] | select(.name | contains($SYSNAME)) | .browser_download_url' | wget -i -
    tar zxvf "$RELEASE"
    chmod +x variant
    mv variant /usr/local/bin
  args:
    executable: /bin/bash

- name: Install kube-ps1
  homebrew:
    name: kube-ps1
    state: present
  when: "ansible_os_family == 'Darwin'"
