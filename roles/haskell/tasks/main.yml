---
- name: Get ansible_user home directory
  ansible.builtin.shell: 'set -o pipefail && getent passwd "{{ ansible_user }}" | cut -d: -f6'
  register: ansible_home_result
  changed_when: false
  tags:
    - config-language
    - config-haskell

- name: Set the fact for the other scripts to use
  ansible.builtin.set_fact: ansible_home={{ ansible_home_result.stdout }}
  changed_when: false
  tags:
    - config-language
    - config-haskell

- name: Install Stack
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    if ! which stack > /dev/null 2>&1; then
      curl -sSL https://get.haskellstack.org/ | sh
    fi
  tags:
    - config-language
    - config-haskell

- name: Upgrade Stack
  become: true
  become_user: "{{ ansible_user }}"
  ansible.builtin.command: stack upgrade
  tags:
    - config-language
    - config-haskell

- name: Create target directory for stack.yaml
  become: true
  become_user: "{{ ansible_user }}"
  ansible.builtin.file:
    path: "{{ ansible_home }}/.stack/global-project"
    state: directory
    mode: 0755
  tags:
    - config-language
    - config-haskell

- name: Place stack.yaml for specified version of ghc install
  become: true
  become_user: "{{ ansible_user }}"
  ansible.builtin.template:
    src: files/stack.yaml
    dest: "{{ ansible_home }}/.stack/global-project/stack.yaml"
  tags:
    - config-language
    - config-haskell

- name: Reinstall ghc
  become: true
  become_user: "{{ ansible_user }}"
  ansible.builtin.command: stack setup
  tags:
    - config-language
    - config-haskell

- name: Install useful packages
  become: true
  become_user: "{{ ansible_user }}"
  ansible.builtin.command: "stack install {{ item }}"
  with_items: "{{ haskell_binaries }}"
  tags:
    - config-language
    - config-haskell

- name: Place ghc-mod.sh
  become: true
  become_user: "{{ ansible_user }}"
  ansible.builtin.template:
    src: files/ghc-mod.sh
    dest: "{{ ansible_home }}/.bash.d/ghc-mod.sh"
    mode: 0755
  tags:
    - config-language
    - config-haskell
