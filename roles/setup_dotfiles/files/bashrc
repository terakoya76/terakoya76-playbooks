# share history with each tab
function share_history {
  history -a
  history -c
  history -r
}
HISTFILE=~/.bash_history
HISTIGNORE=ls:history
PROMPT_COMMAND='share_history'
HISTSIZE=50000

# wrapper for lsec2
lssh () {
  IP=$(lsec2 "$@" | peco | awk -F '\t' '{print $2}')
  if [ "$IP" != "" ] ; then
    echo "$IP"
    ssh "$IP"
  fi
}

# wrapper for history
export HISTCONTROL="ignoredups"
function fzf-history() {
  READLINE_LINE=$(history | tail -r | sed -e 's/^\s*[0-9]\+\s\+//' | awk '!a[$0]++' | fzf --query="$1" | awk '{$1=""; print}')
  if [ -n "$READLINE_LINE" ] ; then
    echo "$READLINE_LINE" >&2
    eval "$READLINE_LINE"
    history -s "$READLINE_LINE"
  fi
}
alias fh="fzf-history"

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
function fe() {
  file=$(fzf --query="$1" --select-1 --exit-0)
  if [ -f "$file" ] ; then
    nvim "$file"
  fi
}

# fzf kill
function fzf-kill() {
  ps -ef | sed 1d | fzf -m | awk '{print $2}' | xargs kill -15
}
alias fk="fzf-kill"

# k8s
alias k="bin/kubectl"

# git
function fetch-pull-request() {
  # $1=remote_branch, $2=pr_number
  git fetch "$1" pull/"$2"/head:"$2"
}
function setup-remote-repository() {
  # $1=path, $2=forked-user, $3=owner-user, $4=repo
  mkdir -p "$1"
  git clone "git@github.com:$2/$4.git" "$1/$4"
  cd "$1/$4" || exit 1
  git remote add upstream "git@github.com:$3/$4.git"
  git remote set-url upstream --push no-pushing
}

alias ga="git add"
alias gs="git status"
alias gb="git branch"
alias gc="git commit"
alias gco="git checkout"
alias gd="git diff"
alias gl="git log"
alias gpr="fetch-pull-request"
alias gsu="setup-remote-repository"

function fgco() {
  git branch | fzf-tmux --reverse | xargs git checkout
}
function fgbd() {
  git branch | fzf-tmux --multi --reverse | xargs git branch -D
}

function fga() {
  git status -s | grep -e '^ M ' | sed -e 's/^ M //' | fzf-tmux --multi --reverse | xargs git add
  git status
}

function fgr() {
  git status -s | grep -e '^M ' | sed -e 's/^M //' | fzf-tmux --multi --reverse | xargs git reset
  git status
}

# docker
alias di="docker image ls"
alias dc="docker container ls"
alias dl="docker ps -l -q"

function dbu() {
  docker build -t "$1" .
}

function dstop() {
  docker stop "$(docker ps -a -q)"
}

function drm() {
  docker rm "$(docker ps -a -q)"
}

function drmf() {
  docker stop "$(docker ps -a -q)"
  docker rm "$(docker ps -a -q)"
}

function dri() {
  docker rmi "$(docker images -q)"
}

function fdip() {
  docker container ls | fzf-tmux --multi --reverse | awk '{print $1}' | xargs docker inspect --format '{{ .NetworkSettings.IPAddress }}'
}

# rails
alias be="bundle ex"

function bes() {
  bundle ex rails s -b 0.0.0.0 -p "$1"
}

# exa(ls)
alias ls=exa

# fdfind(fd)
alias fd=fdfind

# cat(bat)
docker pull danlynn/bat
export BAT_THEME="TwoDark"
alias cat='docker run -it --rm -e BAT_THEME -e BAT_STYLE -e BAT_TABS -v "$(pwd):/myapp" danlynn/bat'

# grpcurl
docker pull terakoya76/grpcurl
alias grpcurl='docker run -it --rm terakoya76/grpcurl'

# direnv
eval "$(direnv hook bash)"
